{"ast":null,"code":"import _slicedToArray from \"C:\\\\laragon\\\\www\\\\hooks-todos\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\laragon\\\\www\\\\hooks-todos\\\\src\\\\index.js\";\nimport React, { useContext, useReducer, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport TodosContext from './context';\nimport todosReducer from './reducer';\nimport TodoList from './components/TodoList';\nimport TodoForm from './components/TodoForm';\nimport axios from 'axios';\nimport Header from './header/header';\nimport Login from './Authentification/login';\nimport Register from './Authentification/Register'; // each hook manages it's own state\n\nconst useAPI = endpoint => {\n  // set initial state to empty array\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1]; // call getData when App component gets mounted\n\n\n  useEffect(() => {\n    getData();\n  }, []); // to make the requests for todos.\n\n  const getData = async () => {\n    const response = await axios.get(endpoint);\n    setData(response.data);\n  }; // return todos that's being set in setData\n\n\n  return data;\n};\n\nconst App = () => {\n  const initialState = useContext(TodosContext);\n\n  const _useReducer = useReducer(todosReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // custom hook\n\n\n  const savedTodos = useAPI(\"https://hooks-api.ellizzabbetth.now.sh/todos\"); // put saved todos in state using redux\n\n  useEffect(() => {\n    // dispatch new action\n    dispatch({\n      type: \"GET_TODOS\",\n      payload: savedTodos\n    }); // dispatch action when savedTodos changes\n  }, [savedTodos]);\n  return React.createElement(TodosContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(Login, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Register, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(TodoForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(TodoList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["C:\\laragon\\www\\hooks-todos\\src\\index.js"],"names":["React","useContext","useReducer","useState","useEffect","ReactDOM","serviceWorker","TodosContext","todosReducer","TodoList","TodoForm","axios","Header","Login","Register","useAPI","endpoint","data","setData","getData","response","get","App","initialState","state","dispatch","savedTodos","type","payload","render","document","getElementById","unregister"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,QAAxC,EAAkDC,SAAlD,QAAmE,OAAnE;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,YAAP,MAAyB,WAAzB;AACA,OAAOC,YAAP,MAAyB,WAAzB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,QAAP,MAAqB,6BAArB,C,CAEA;;AACA,MAAMC,MAAM,GAAGC,QAAQ,IAAI;AACzB;AADyB,oBAEDb,QAAQ,CAAC,EAAD,CAFP;AAAA;AAAA,QAElBc,IAFkB;AAAA,QAEZC,OAFY,kBAGzB;;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,OAAO;AACV,GAFQ,EAEN,EAFM,CAAT,CAJyB,CAOzB;;AACA,QAAMA,OAAO,GAAG,YAAY;AAC1B,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUL,QAAV,CAAvB;AACAE,IAAAA,OAAO,CAACE,QAAQ,CAACH,IAAV,CAAP;AACD,GAHD,CARyB,CAYzB;;;AACA,SAAOA,IAAP;AACD,CAdD;;AAgBA,MAAMK,GAAG,GAAE,MAAM;AACd,QAAMC,YAAY,GAAGtB,UAAU,CAACM,YAAD,CAA/B;;AADc,sBAEYL,UAAU,CAACM,YAAD,EAAee,YAAf,CAFtB;AAAA;AAAA,QAEPC,KAFO;AAAA,QAEAC,QAFA,oBAGd;;;AACA,QAAMC,UAAU,GAAIX,MAAM,CAAC,8CAAD,CAA1B,CAJc,CAKd;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd;AACAqB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAE,WADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR,CAFc,CAKX;AACJ,GANQ,EAMN,CAACA,UAAD,CANM,CAAT;AAQA,SAEE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACF,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAEG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,EAGG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHH,EAIG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJH,EAKG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALH,CADF,CAFF;AAcF,CA5BD;;AA8BApB,QAAQ,CAACwB,MAAT,CAEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,EAGEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHF,E,CAKA;AACA;AACA;;AACCzB,aAAa,CAAC0B,UAAd","sourcesContent":["import React, { useContext, useReducer, useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport TodosContext from './context';\r\nimport todosReducer from './reducer';\r\nimport TodoList from './components/TodoList';\r\nimport TodoForm from './components/TodoForm';\r\nimport axios from 'axios';\r\nimport Header from './header/header';\r\nimport Login from './Authentification/login';\r\nimport Register from './Authentification/Register';\r\n\r\n// each hook manages it's own state\r\nconst useAPI = endpoint => {\r\n  // set initial state to empty array\r\n  const [data, setData] = useState([]);\r\n  // call getData when App component gets mounted\r\n  useEffect(() => {\r\n      getData();\r\n  }, []);\r\n  // to make the requests for todos.\r\n  const getData = async () => {\r\n    const response = await axios.get(endpoint);\r\n    setData(response.data);\r\n  }\r\n  // return todos that's being set in setData\r\n  return data;\r\n}\r\n\r\nconst App =() => {\r\n   const initialState = useContext(TodosContext);\r\n   const [state, dispatch] = useReducer(todosReducer, initialState);\r\n   // custom hook\r\n   const savedTodos =  useAPI(\"https://hooks-api.ellizzabbetth.now.sh/todos\");\r\n   // put saved todos in state using redux\r\n   useEffect(() => {\r\n     // dispatch new action\r\n     dispatch({\r\n       type: \"GET_TODOS\",\r\n       payload: savedTodos\r\n     }) // dispatch action when savedTodos changes\r\n   }, [savedTodos]);\r\n\r\n   return (\r\n\r\n     <TodosContext.Provider value={{state, dispatch}}>\r\n       <Switch>\r\n          <Header />\r\n          <Login />\r\n          <Register />\r\n          <TodoForm />\r\n          <TodoList />\r\n       </Switch>\r\n     \r\n     </TodosContext.Provider>\r\n\r\n   )\r\n}\r\n\r\nReactDOM.render(\r\n\r\n    <App />\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n serviceWorker.unregister();\r\n"]},"metadata":{},"sourceType":"module"}